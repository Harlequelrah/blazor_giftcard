using blazor_giftcard.Components;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Components.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Http;
using System.Net.Http;
using blazor_giftcard;
using blazor_giftcard.Services;

var builder = WebApplication.CreateBuilder(args);
builder.Services.AddSingleton(TimeProvider.System);
// Ajouter les services au conteneur.
builder.Services.AddRazorComponents()
    .AddInteractiveServerComponents();

// builder.Services.AddTransient<JwtAuthorizationHandler>();

builder.Services.AddHttpClient("authClientAPI", client =>
{
    client.BaseAddress = new Uri("http://localhost:5107/api/");
});
// .AddHttpMessageHandler<JwtAuthorizationHandler>();
builder.Services.AddHttpClient("noauthClientAPI", client =>
{
    client.BaseAddress = new Uri("http://localhost:5107/api/");
});

builder.Services.AddScoped(sp => sp.GetRequiredService<IHttpClientFactory>().CreateClient("authClientAPI"));
builder.Services.AddScoped(sp => sp.GetRequiredService<IHttpClientFactory>().CreateClient("noauthClientAPI"));
builder.Services.AddHttpContextAccessor();

builder.Services.AddCascadingAuthenticationState();
builder.Services.AddScoped<CustomAuthenticationStateProvider>();
builder.Services.AddScoped<AuthenticationStateProvider>(provider => provider.GetRequiredService<CustomAuthenticationStateProvider>());
builder.Services.AddHttpClient();
builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(options =>
    {
        options.LoginPath = "/Account/Login";
        options.Cookie.HttpOnly = true; // Pas accessible via JavaScript
        options.Cookie.SecurePolicy = CookieSecurePolicy.Always; // Toujours utiliser HTTPS
        options.Cookie.SameSite = SameSiteMode.Strict; // Protection contre le CSRF
        options.Events.OnRedirectToLogin = context =>
        {
            context.Response.StatusCode = StatusCodes.Status401Unauthorized;
            return Task.CompletedTask;
        };
    });


builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("ADMIN", policy => policy.RequireRole("ADMIN"));
    options.AddPolicy("SUBSCRIBER", policy => policy.RequireClaim("role", "SUBSCRIBER"));
});

builder.Services.AddScoped<SubscriberService>();

builder.Services.AddLogging(logging =>
{
    logging.AddConsole();
    logging.AddDebug();
});
builder.Services.AddServerSideBlazor();

var app = builder.Build();

// Configurer le pipeline de traitement des requÃªtes HTTP.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();
app.UseAuthentication();
// app.UseMiddleware<AuthorizationDebugMiddleware>();
app.UseAuthorization();
app.UseAntiforgery();
app.UseMiddleware<AuthenticationMiddleware>();
app.MapRazorComponents<App>()
    .AddInteractiveServerRenderMode();




app.Run();
