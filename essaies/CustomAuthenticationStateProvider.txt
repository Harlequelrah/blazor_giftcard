using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Authorization;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.JSInterop;
using System.Net.Http;
using System.Text.Json;
using Microsoft.Extensions.Configuration;
using System.Net.Http.Json;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;

namespace blazor_giftcard.Services
{
    public class ErrorResponseModel
    {
        public string ErrorMessage { get; set; }
        // Ajoute d'autres propriétés si nécessaire
    }

    public class CustomAuthenticationStateProvider : AuthenticationStateProvider
    {
        private readonly HttpClient _httpClient;
        private readonly IConfiguration _configuration;
        private readonly ILogger<CustomAuthenticationStateProvider> _logger;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public CustomAuthenticationStateProvider(
            HttpClient httpClient,
            IConfiguration configuration,
            ILogger<CustomAuthenticationStateProvider> logger,
            IHttpContextAccessor httpContextAccessor
        )
        {
            _httpClient = httpClient;
            _configuration = configuration;
            _logger = logger;
            _httpContextAccessor = httpContextAccessor ?? throw new ArgumentNullException(nameof(httpContextAccessor));
        }

        public override async Task<AuthenticationState> GetAuthenticationStateAsync()
        {
            _logger.LogInformation("Getting authentication state...");
            var user = _httpContextAccessor.HttpContext.User;

            // Directly use the HttpContext.User to create AuthenticationState
            var identity = user.Identity.IsAuthenticated ? user.Identity as ClaimsIdentity : new ClaimsIdentity();
            var authState = new AuthenticationState(new ClaimsPrincipal(identity));

            _logger.LogInformation($"User authenticated: {authState.User.Identity.IsAuthenticated}");
            return authState;
        }

        public async Task Login(string email, string password)
        {
            _logger.LogInformation("Attempting to log in user: {Email}", email);

            try
            {
                var apiBaseUrl = _configuration["ApiBaseUrl"];
                if (string.IsNullOrEmpty(apiBaseUrl))
                {
                    _logger.LogError("API base URL is not configured.");
                    return;
                }

                var client = _httpClient;
                var loginUrl = new Uri(new Uri(apiBaseUrl), "/api/User/login");
                var response = await client.PostAsJsonAsync(loginUrl, new { email, password });

                _logger.LogInformation("Login response received...");
                if (!response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    _logger.LogWarning("Login failed with status code: {StatusCode}. Response content: {Content}", response.StatusCode, responseContent);
                    return;
                }

                var result = await response.Content.ReadFromJsonAsync<AuthResponse>();
                if (result == null || string.IsNullOrEmpty(result.Token))
                {
                    _logger.LogWarning("No token received for user: {Email}", email);
                    return;
                }

                var identity = new ClaimsIdentity(new[] { new Claim(ClaimTypes.Name, email) }, "Cookies");
                var authProperties = new AuthenticationProperties
                {
                    ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(60),
                    IsPersistent = true
                };

                // Assure-toi que la réponse n'a pas encore commencé avant de faire SignInAsync
                var context = _httpContextAccessor.HttpContext;
                if (context != null && !context.Response.HasStarted)
                {
                    await context.SignInAsync("Cookies", new ClaimsPrincipal(identity), authProperties);
                    _logger.LogInformation("User signed in.");
                    NotifyAuthenticationStateChanged(GetAuthenticationStateAsync());
                }
                else
                {
                    _logger.LogWarning("Response has already started. Cannot sign in.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Login failed for user: {Email}", email);
            }
        }



        public async Task Logout()
        {
            try
            {
                _logger.LogInformation("Logging out user...");
                await _httpContextAccessor.HttpContext.SignOutAsync("Cookies");
                NotifyAuthenticationStateChanged(GetAuthenticationStateAsync());
                _logger.LogInformation("User logged out successfully.");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Logout failed.");
            }
        }

        public async ValueTask DisposeAsync()
        {
            // No specific cleanup needed for cookies-based authentication
        }


        public async Task<bool> TryRefreshTokenAsync()
        {
            var refreshRequest = new { }; // Pas besoin de fournir le refresh token depuis le client

            var refreshTokenResponse = await _httpClient.PostAsJsonAsync("http://localhost:7168/api/User/refresh-token", refreshRequest);

            if (refreshTokenResponse.IsSuccessStatusCode)
            {
                var result = await refreshTokenResponse.Content.ReadFromJsonAsync<AuthResponse>();

                // Avec l'authentification par cookie, tu n'as plus besoin de stocker le token ici.

                NotifyAuthenticationStateChanged(GetAuthenticationStateAsync());
                return true;
            }

            return false;
        }
        private async Task<string> GetRefreshTokenFromServer()
        {
            var response = await _httpClient.GetAsync("http://localhost:7168/api/User/get-refresh-token");

            if (response.IsSuccessStatusCode)
            {
                var refreshToken = await response.Content.ReadAsStringAsync();
                return refreshToken;
            }

            return null;
        }

    }

    public class AuthResponse
    {
        public string Token { get; set; }
    }
}
