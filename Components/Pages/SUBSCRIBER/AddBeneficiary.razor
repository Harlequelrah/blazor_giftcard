@page "/add/beneficiary/{IdSubscription:int}"


@using Microsoft.JSInterop
@using blazor_giftcard.Models
@using blazor_giftcard.Services
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject UserContextService UserContext
@inject SubscriberService SS
@inject ToastrService Notify

<head>

<link rel="stylesheet" href="Layout.css" />
</head>
<PageTitle>+Employee</PageTitle>


<div class="container">
<EditForm Model="beneficiary" OnValidSubmit="ShowConfirmModal" FormName="RegisterBeneficiaryForm" >
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <InputText @bind-Value="beneficiary.Email" placeholder="Email" />
    </div>
    <div>
        <InputText @bind-Value="beneficiary.Nom"  placeholder="Nom" />
    </div>
      <div>
        <InputText @bind-Value="beneficiary.Prenom" placeholder="Prenom" />
    </div>
    <div class="checkbox-container">
    <InputCheckbox @bind-Value="beneficiary.Has_gochap" />
    <label>A gochap</label>
</div>
            <div>
                <InputText @bind-Value="beneficiary.TelephoneNumero" placeholder="Telephone" />
            </div>
    <button type="submit" >Enregistrer</button>
</EditForm>
  <div class="drop drop-1">
  <p>Remplissez le formulaire suivant pour enregistrer votre beneficiaire</p>
  </div>
  <div class="drop drop-2"></div>
  <div class="drop drop-4"></div>
  <div class="drop drop-5"></div>
</div>
 <ConfirmModal Title="Souhaitez-vous definir un Montant spécifique?" OnConfirm="HandleConfirm" OnClose="CloseConfirmation" />
 <GenericInputModal Title="Entrer un montant" InputLabel="Montant" OnSubmit="HandleModalSubmit" />
<Redirection Url="@RedirectUrl" />

@code {
private double Montant = -1.0;
[Parameter]
public  int IdSubscription {get; set;}
[SupplyParameterFromForm]
private BeneficiaryDto beneficiary{ get; set; } = new BeneficiaryDto();
private string RedirectUrl => $"add/beneficiary/{IdSubscription}";



private async Task ShowConfirmModal()
    {
        beneficiary.IdSubscription = IdSubscription;
        JSRuntime.InvokeVoidAsync("showModal", "confirmModal");
    }

    private async Task HandleConfirm(bool confirmed)
    {
        JSRuntime.InvokeVoidAsync("hideModal", "confirmModal");
        if (confirmed)
        {
            JSRuntime.InvokeVoidAsync("showModal", "genericInputModal");
        }
    }
    private async Task  CloseConfirmation()
    {
        await RegisterBeneficiaryAsync();
        JSRuntime.InvokeVoidAsync("hideModal", "confirmModal");

    }
    private async Task RegisterBeneficiaryAsync()
    {
        try
            {
                Notify.Info("L'enregistrement est en cours .Veuillez patienter quelques instants.","Information");
                await SS.RegisterBeneficiaryAsync(UserContext.Subscriber.Id, Montant, beneficiary);
                Notify.Success("L'enregistrement s'est déroulé avec succès", "SUCCESS");
                beneficiary = new BeneficiaryDto();
                UserContext.Subscriber = await UserContext.GetSubscriberAsync(UserContext.Subscriber.IdUser);
                if (UserContext.Subscriber.SubscriberWallet != null)
                {
                    await JSRuntime.InvokeVoidAsync("setSubscriber", UserContext.Subscriber.SubscriberName, $"{UserContext.Subscriber.SubscriberWallet.Solde} {UserContext.Subscriber.SubscriberWallet.Devise}");
                }
            }
            catch (Exception ex)
            {
                Notify.Error("Erreur lors de l'enregistrement du bénéficiaire", "ERROR");
                Console.WriteLine($"Error loading Subscriptions: {ex.Message}");
            }

    }

    private async Task HandleModalSubmit(string input)
    {
        if (double.TryParse(input, out double number))
        {
            Montant = number;
            JSRuntime.InvokeVoidAsync("hideModal", "genericInputModal");
            await RegisterBeneficiaryAsync();

        }
        else
        {
            Notify.Error("Montant invalide", "ERROR");
        }
    }
}
