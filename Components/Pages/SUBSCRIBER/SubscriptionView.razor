@page "/view/subscription"
@using blazor_giftcard.Services
@using blazor_giftcard.Models
@inject ToastrService Notify
@inject SubscriberService SS
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject CustomAuthenticationStateProvider CAST
@inject UserContextService UserContext
@rendermode InteractiveServer
<head>

<link rel="stylesheet" href="View.css" />
</head>
<PageTitle>Subscription</PageTitle>
<div class="container">
    @if (Subscriptions == null)
    {
        <div class="drop col-md-3" style="height:100px">
        <p>Loading...</p>
        </div>
    }
    else if (Subscriptions.Count == 0)
    {
    <div class="drop col-md-3" style="height:100px">
        <p>No subscriptions available.</p>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var subscription in Subscriptions)
            {
                <div class="drop col-md-3">
                    <h2>@subscription.NomPackage</h2>
                    <p>Budget Restant : @subscription.BudgetRestant €</p>
                    <p>DateSouscription : @subscription.DateSouscription</p>
                    <p>Nombre de cartes générées : @subscription.NbrCarteGenere.</p>
                    <p>Montant Par carte : @subscription.MontantParCarte</p>
                    <p>Date Expiration : @(!string.IsNullOrEmpty(subscription.DateExpiration) ? subscription.DateExpiration : "Illimité")</p>
                    <button @onclick="() => Add(subscription.Id)">Ajouter un beneficiaire</button>
                </div>
            }
        </div>
    }
</div>
<Redirection Url="view/subscription" />

@code
{
    private List<Subscription> Subscriptions ;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100);
            await LoadSubscriptions();
            StateHasChanged();
        }
    }

    private async Task LoadSubscriptions()
    {

        try
        {
            if(UserContext.Subscriber.Id!=0)
            {
                Subscriptions = await SS.GetSubscriptionsBySubscriberAsync(UserContext.Subscriber.Id);
            }
            else  Notify.Error($"le souscripteur est introuvable", "Erreur");

        }
                catch (Exception ex)
        {
            Notify.Error("Error retrieving subscriptions", "Erreur");
            Console.WriteLine($"Error loading Subscriptions: {ex.Message}");
        }
    }
    private async Task Add(int IdSubscription)
    {
        Console.WriteLine("ajoutdesouscription");
        Navigation.NavigateTo($"/add/beneficiary/{IdSubscription}");
    }

}
