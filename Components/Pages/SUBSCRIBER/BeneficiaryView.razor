@page "/view/beneficiary"
@using blazor_giftcard.Services
@using blazor_giftcard.Models
@inject ToastrService Notify
@inject SubscriberService SS
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject CustomAuthenticationStateProvider CAST
@inject UserContextService UserContext
@rendermode InteractiveServer
<head>

<link rel="stylesheet" href="ListView.css" />
</head>
<PageTitle>Beneficiaries</PageTitle>
<h3>Liste des Beneficiaires</h3>
<div class="listview-container">
    @if (Beneficiaries == null)
    {
        <div class="drop col-md-3">
        <p>Loading...</p>
        </div>
    }
    else if (Beneficiaries.Count == 0)
    {
        <p>No beneficiaries available.</p>
    }
    else
    {
    <table class="listview-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nom</th>
                <th>Prenom</th>
                <th>Telphone</th>
                <th>A Gochap</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var beneficiary in beneficiaries)
            {
                <tr>
                    <td>@beneficiary.Id</td>
                    <td>@beneficiary.Nom</td>
                    <td>@beneficiary.Prenom</td>
                    <td>@beneficiary.TelephoneNumero</td>
                    <td>
                    @if (beneficiary.Has_Gochap)
                    {
                        <i class="bi bi-check-circle text-success"></i>
                    }
                    else
                    {
                        <i class="bi bi-x-circle text-danger"></i>
                    }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    }
</div>
<Redirection Url="view/beneficiary" />

@code
{
    private List<Beneficiary> Beneficiaries =new List<Beneficiary>();
    private List<View> beneficiaries =new List<View>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100);
            await LoadBeneficiaries();
            StateHasChanged();
        }
    }

    private async Task LoadBeneficiaries()
    {

        try
        {
            if(UserContext.Subscriber.Id!=0)
            {
                Beneficiaries = await SS.GetSubscriberBeneficiariesAsync(UserContext.Subscriber.Id);
                beneficiaries = await FormatBeneficiary(Beneficiaries);
            }
            else  Notify.Error($"le souscripteur est introuvable", "Erreur");

        }
                catch (Exception ex)
        {
            Notify.Error($"Error retrieving beneficiaries", "Erreur");
            Console.WriteLine($"Error loading Beneficiaries: {ex.Message}");
        }
    }
    private async Task<List<View>> FormatBeneficiary(List<Beneficiary> beneficiaries)
        {
            List<View> beneficiaryviews = new List<View>();

            for (int i = 0; i < beneficiaries.Count; i++)
            {
                View beneficiaryview = new View
                {
                    Id = i + 1,
                    Nom = beneficiaries[i].Nom,
                    Prenom = beneficiaries[i].Prenom,
                    TelephoneNumero = beneficiaries[i].TelephoneNumero,
                    Has_Gochap = beneficiaries[i].Has_gochap,
                };

                beneficiaryviews.Add(beneficiaryview);
            }

            return await Task.FromResult(beneficiaryviews);
        }
    public sealed class View
    {
        public int Id { get; set;}
        public string Nom{ get; set;}
        public string Prenom { get; set;}
        public string TelephoneNumero { get; set;}
        public bool Has_Gochap{ get; set;}
    }

}
