@page "/view/package"
@using blazor_giftcard.Services
@using blazor_giftcard.Models
@inject ToastrService Notify
@inject SubscriberService SS
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject CustomAuthenticationStateProvider CAST
@inject UserContextService UserContext
@rendermode InteractiveServer

<head>
    <link rel="stylesheet" href="View.css" />
</head>

<PageTitle>Packages</PageTitle>

<div class="container">
    @if (Packages == null)
    {
        <div class="drop col-md-3">
            <p>Loading...</p>
        </div>
    }
    else if (Packages.Count == 0)
    {
        <p>No packages available.</p>
    }
    else
    {
        <div class="row">
            @foreach (var package in Packages)
            {
                <div class="drop col-md-3">
                    <h2>@package.NomPackage</h2>
                    <p>@package.Description</p>
                    <p>Jours : @(package.NbrJour.HasValue ? package.NbrJour.ToString() : "Illimité")</p>
                    <p>Budget : @package.Budget €</p>
                    <p class="price">Prix : @package.Prix €</p>
                    <p>Montant de Base : @package.MontantBase €</p>
                    <button @onclick="() => ShowConfirmModal(package.Id)">Souscrire</button>
                </div>
            }
        </div>
    }
</div>




 <ConfirmModal Title="Souhaitez vous definir un montant par carte?" OnConfirm="HandleConfirm" OnClose="CloseConfirmation" />
 <GenericInputModal Title="Entrer un montant" InputLabel="Montant" OnSubmit="HandleModalSubmit" />

<Redirection Url="view/package" />

@code
{
    private double? Montant;
    private int packageIdToSubscribe;
    private List<Package> Packages = new List<Package>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(200);
        await LoadPackages();
    }

    private async Task LoadPackages()
    {
        try
        {
            Packages = await SS.GetPackagesAsync();
        }
        catch (Exception ex)
        {
            Notify.Error($"Error retrieving packages: {ex.Message}", "ERROR");
            Console.WriteLine($"Error loading Packages: {ex.Message}");
        }
    }

    private void ShowConfirmModal(int packageId)
    {
        packageIdToSubscribe = packageId;
        Console.WriteLine($"Package: {packageIdToSubscribe}");
        JSRuntime.InvokeVoidAsync("showModal", "confirmModal");
    }
    private async Task CloseConfirmation()
    {
        JSRuntime.InvokeVoidAsync("hideModal", "confirmModal");
        await SubmitSubscription();
    }

    private async Task HandleConfirm(bool confirmed)
    {
        JSRuntime.InvokeVoidAsync("hideModal", "confirmModal");
        if (confirmed)
        {
            JSRuntime.InvokeVoidAsync("showModal", "genericInputModal");
        }
    }


    private async Task HandleModalSubmit(string input)
    {

        if (double.TryParse(input, out double number))
        {
            Montant = number;
        }
        else
        {
            Montant = null;
        }
        JSRuntime.InvokeVoidAsync("hideModal", "genericInputModal");
        await SubmitSubscription();

    }
    private async Task SubmitSubscription()
    {
        try
        {
            await SS.PostSubscriptionAsync(packageIdToSubscribe, Montant, UserContext.Subscriber.Id);
            Notify.Success("Votre souscription s'est déroulée avec succès", "SUCCESS");
            UserContext.Subscriber = await UserContext.GetSubscriberAsync(UserContext.Subscriber.IdUser);
            if (UserContext.Subscriber.SubscriberWallet != null)
            {
                await JSRuntime.InvokeVoidAsync("setSubscriber", UserContext.Subscriber.SubscriberName, $"{UserContext.Subscriber.SubscriberWallet.Solde} {UserContext.Subscriber.SubscriberWallet.Devise}");
            }
            Navigation.NavigateTo("/view/subscription");
        }
        catch (Exception ex)
        {
            Notify.Error("Erreur lors de la souscription", "ERROR");
            Console.WriteLine($"Error subscribing to Package {packageIdToSubscribe}: {ex.Message}");
        }

    }
}
