@page "/profil"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Authorization
@using blazor_giftcard.Services
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer




<h3>Profil</h3>
<div>
    <p>Utilisateur : @userName</p>
    <p>ID : @userId</p>
    <p>Role : @role</p>
</div>

<div>
    <h4>Claims</h4>
    <ul>
        @foreach (var claim in claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
</div>
<p id="test">Initial text</p>
<button class="btn btn-danger" @onclick="Logout">Déconnexion</button>
<button class="btn btn-danger" @onclick="CallJsFunction" >Test</button>




@code {
    private string userName = "Chargement...";
    private string userId = "Chargement...";
    private string role = "Chargement...";
    private string errorMessage;
    private IEnumerable<Claim> claims = new List<Claim>();
    private async Task CallJsFunction()
    {
        await JS.InvokeVoidAsync("showAlert", "Hello from Blazor!");
    }
    private async Task ChangeVisibility(string role)
    {
        try
        {
            await JS.InvokeVoidAsync("manageVisibility", role);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calling JavaScript function: {ex.Message}");
        }
    }


    private async Task Logout()
    {
        try
        {
            await AuthenticationStateProvider.Logout();

            NavigationManager.NavigateTo("/login");

        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors de la déconnexion : {ex.Message}";
            Console.WriteLine($"Exception lors de la déconnexion : {ex}");
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AuthenticationStateProvider.NotifyPostPrerender();
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;



                if (user.Identity.IsAuthenticated)
                {
                    userName = user.FindFirst("unique_name")?.Value ?? "Utilisateur inconnu";
                    userId = user.FindFirst("nameid")?.Value ?? "ID non trouvé";
                    role = user.FindFirst("role")?.Value ?? "Sans Role";
                    claims = user.Claims;
                    //ChangeVisibility(role);
                }
                else
                {
                    NavigationManager.NavigateTo("/login", true);
                }

                StateHasChanged();
            }
            catch (Exception ex)
            {
                errorMessage = $"Erreur lors de l'initialisation du profil : {ex.Message}";
                Console.WriteLine($"Exception lors de l'initialisation du profil : {ex}");
            }
        }
}
}
