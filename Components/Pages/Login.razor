@page "/login"
@using blazor_giftcard.Services
@using Microsoft.AspNetCore.Components.Forms
@inject ToastrService Notify
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
<head>

<link rel="stylesheet" href="Layout.css" />

</head>
<PageTitle>Login</PageTitle>


<div class="loginbox container ">
<EditForm Model="user" OnValidSubmit="HandleLogin" FormName="loginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <InputText @bind-Value="user.Email" placeholder="Email"  />
    </div>
    <div class="password-container">
        <InputText @bind-Value="user.Password" class="password-input" type="@(showPassword ? "text" : "password")" placeholder="Password" />
        <button type="button" @onclick="TogglePasswordVisibility" class="password-toggle-btn">
            <i class="bi @(showPassword ? "bi-eye-slash" : "bi-eye")"></i>
        </button>
    </div>
    <button type="submit">Login</button>
</EditForm>
  <div class="drop drop-1"></div>
  <div class="drop drop-2"></div>
  <div class="drop drop-3">
<p>Remplissez le formulaire ci-dessous pour acceder à la plateforme</p>
  </div>
  <div class="drop drop-4"></div>
  <div class="drop drop-5"></div>

</div>
@code {
        private bool showPassword = false;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }
    [SupplyParameterFromForm]
    private User user { get; set; } = new User();
    private async Task HandleLogin()
    {

        try
        {
            Notify.Info("La connexion est en cours;Veuillez patienter quelques instants","Information");
            await AuthStateProvider.Login(user.Email, user.Password);
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var current_user = authState.User;
            if (current_user?.Identity == null || !current_user.Identity.IsAuthenticated)
            {
            Notify.Error("Échec de la connexion. Veuillez vérifier vos identifiants.","ERREUR");
            }
            var role  = current_user.FindFirst("role")?.Value ?? "";
            if (role=="SUBSCRIBER")
            {
                Notify.Success("Bienvenue cher Souscripteur","SUCCESS");
                Navigation.NavigateTo("/view/package");
            }
            else if (role=="ADMIN")
            {
                Notify.Success("Bienvenue cher Admin","SUCCESS");
                Navigation.NavigateTo("/admin/user/view");
            }

        }
        catch (HttpRequestException ex)
        {
            Notify.Error("Nom d'utilisateur ou mot de passe incorrect.","ERREUR");
            Console.WriteLine($"Login error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Notify.Error("Une erreur inconnue s'est produite..","ERREUR");
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }

    public class User
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
