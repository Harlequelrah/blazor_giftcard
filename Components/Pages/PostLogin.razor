@page "/postlogin/{Url}"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using blazor_giftcard.Services
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@using Microsoft.JSInterop
@inject IJSRuntime JS
@code {
    [Parameter]
    public  string Url {get; set;}

    private IDisposable _locationChangedHandler;

    [Parameter]
    public string ErrorMessage {get; set;}

    public string Username {get; set;}
    public string Role {get; set;}


protected override async Task OnInitializedAsync()
{
    _locationChangedHandler = Navigation.RegisterLocationChangingHandler(OnLocationChanging);

}
 protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
            if(!string.IsNullOrEmpty(ErrorMessage))
            {
                await JS.InvokeVoidAsync("alert",ErrorMessage);
            }
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                Username=user.FindFirst("unique_name")?.Value ?? "";
                Role = user.FindFirst("role")?.Value ?? "";
                if (user.Identity.IsAuthenticated)
                {
                    Navigation.NavigateTo("/"+Url);
                }
                else
                {
                    Navigation.NavigateTo("/login", true);
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Erreur lors de l'initialisation du profil : {ex.Message}";
                await JS.InvokeVoidAsync("alert",ErrorMessage);
                Console.WriteLine($"Exception lors de l'initialisation du profil : {ex}");
            }
            try{
                await JS.InvokeVoidAsync("updateUserState", true, Username);
                await JS.InvokeVoidAsync("manageVisibility", Role);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Erreur lors de l'initialisation du profil : {ex.Message}";
                await JS.InvokeVoidAsync("alert",ErrorMessage);
                Console.WriteLine($"Exception lors de l'initialisation du profil : {ex}");
            }


        }
    }
    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        var newUrl = context.TargetLocation;
            if(newUrl==Url)
            {
                context.PreventNavigation();
            }
        return ValueTask.CompletedTask;
    }
      public void Dispose()
    {
        _locationChangedHandler?.Dispose();
    }
}







