@page "/admin/beneficiary/view"
@using blazor_giftcard.Services
@using blazor_giftcard.Models
@inject ToastrService Notify
@inject AdminService AS
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
<head>
<link rel="stylesheet" href="ListView.css" />
</head>
<PageTitle>Beneficiaries</PageTitle>
<h3>Liste des Beneficiaires</h3>
<div class="listview-container">
    @if (Beneficiaries == null)
    {
        <div class="drop col-md-3">
        <p>Loading...</p>
        </div>
    }
    else if (Beneficiaries.Count == 0)
    {
        <p>No beneficiaries available.</p>
    }
    else
    {
    <table class="listview-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>IdUser</th>
                <th>Nom</th>
                <th>Prenom</th>
                <th>Solde</th>
                <th>Telephone</th>
                <th>A Gochap</th>
                <th>Historique</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var beneficiary in Beneficiaries)
            {
                <tr>
                    <td>@beneficiary.Id</td>
                    <td>@beneficiary.IdUser</td>
                    <td>@beneficiary.Nom</td>
                    <td>@beneficiary.Prenom</td>
                    @if(beneficiary.BeneficiaryWallet!=null)
                            {
                                <td>
                                <span style="margin-right:6px;">@beneficiary.BeneficiaryWallet.Solde @beneficiary.BeneficiaryWallet.Devise</span>
                                    <a href="javascript:void(0)" @onclick="() => UpdateWallet(beneficiary.BeneficiaryWallet.Id)">
                                    <i class="bi bi-pencil-square"></i>
                                </a>
                                </td>
                            }
                            else{
                                <td>Indisponible</td>
                            }
                            <td>@beneficiary.TelephoneNumero</td>
                    <td>
                    @if (beneficiary.Has_gochap)
                    {
                        <i class="bi bi-check-circle text-success"></i>
                    }
                    else
                    {
                        <i class="bi bi-x-circle text-danger"></i>
                    }
                    </td>
                            <td>
                                <a href="javascript:void(0)" @onclick="() => ViewHistory(beneficiary.Id)" style="margin-left: 10px;">
                                    <i class="bi bi-eye"></i>
                                </a>
                            </td>
                </tr>
            }
        </tbody>
    </table>

    }
</div>
<ConfirmModal Title="Souhaitez vous vraiment modifier ce solde?" OnConfirm="HandleConfirm" OnClose="CloseConfirmation" />
<GenericInputModal Title="Entrer un montant" InputLabel="Montant" OnSubmit="HandleModalSubmit" />
<Redirection Url="admin/beneficiary/view" />

@code
{
    private double Montant ;
    private int IdWallet ;
    private List<Beneficiary> Beneficiaries =new List<Beneficiary>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100);
            await LoadBeneficiaries();
            StateHasChanged();
        }
    }

    private void ViewHistory(int beneficiaryId)
    {
        Navigation.NavigateTo($"admin/beneficiaryhistory/view/{beneficiaryId}");
    }

    private async Task LoadBeneficiaries()
    {

        try
        {
                Beneficiaries = await AS.GetBeneficiariesAsync();
            }
                catch (Exception ex)
        {
            Notify.Error($"Error retrieving beneficiaries", "Erreur");
            Console.WriteLine($"Error loading Beneficiaries: {ex.Message}");
        }
    }
        private void UpdateWallet(int idWallet)
    {
        IdWallet = idWallet;
        JSRuntime.InvokeVoidAsync("showModal", "confirmModal");
    }
        private async Task HandleConfirm(bool confirmed)
    {
        JSRuntime.InvokeVoidAsync("hideModal", "confirmModal");
        if (confirmed)
        {
            JSRuntime.InvokeVoidAsync("showModal", "genericInputModal");
        }
    }
        private async Task  CloseConfirmation()
    {
        JSRuntime.InvokeVoidAsync("hideModal", "confirmModal");
    }
    private async Task HandleModalSubmit(string input)
    {
        if (double.TryParse(input, out double number))
        {
            Montant = number;
            JSRuntime.InvokeVoidAsync("hideModal", "genericInputModal");
            var update = await AS.UpdateWalletAsync(IdWallet,Montant);
            if(update)
            {
                Notify.Success("Mise à jour du sode effectuée avec succès","SUCCESS");
                await LoadBeneficiaries();
                StateHasChanged();
            }


        }
        else
        {
            Notify.Error("Montant invalide", "ERROR");
        }
    }
}
