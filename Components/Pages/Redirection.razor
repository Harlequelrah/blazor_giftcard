@page "/postlogin/{Url}"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using blazor_giftcard.Components.Pages
@inject NotificationService NotificationService
@using blazor_giftcard.Services
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@using Microsoft.JSInterop
@inject UserContextService UserContext
@inject IJSRuntime JS
@code {
    [Parameter]
    public  string Url {get; set;}

    private IDisposable _locationChangedHandler;



protected override async Task OnInitializedAsync()
{
    _locationChangedHandler = Navigation.RegisterLocationChangingHandler(OnLocationChanging);

}
 protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                UserContext.Username = user.FindFirst("unique_name")?.Value ?? "";
                UserContext.Role = user.FindFirst("role")?.Value ?? "";
                UserContext.IdUser = int.Parse(user.FindFirst("nameid")?.Value ?? "0");
                Console.WriteLine(UserContext.Username + UserContext.IdUser);
                //UserContext.Token = await AuthenticationStateProvider.GetTokenAsync();
                if(UserContext.IdSubscriber==-1 ||  UserContext.IdSubscriber==0)
                {
                    Console.WriteLine("getting Id");
                    UserContext.IdSubscriber = await UserContext.GetId(UserContext.IdUser);
                }
                else{
                    Console.WriteLine("IdSubscriber = " + UserContext.IdSubscriber);
                }
                if (user.Identity.IsAuthenticated)
                {
                    Navigation.NavigateTo("/"+Url);
                }
                else
                {
                    UserContext.Username ="";
                    UserContext.Role     ="";
                    UserContext.IdUser   =0;
                    UserContext.IdSubscriber   =-1;
                    UserContext.Token ="";
                    Navigation.NavigateTo("/login", true);
                }
            }
            catch (Exception ex)
            {
                //await JS.InvokeVoidAsync("alert",ErrorMessage);
                NotificationService.Notify($"Error retrieving packages: {ex.Message}", "error");
                Console.WriteLine($"Exception lors de l'initialisation du profil : {ex}");
            }
            try{
                await JS.InvokeVoidAsync("updateUserState", true, UserContext.Username);
                await JS.InvokeVoidAsync("manageVisibility", UserContext.Role);
            }
            catch (Exception ex)
            {
                NotificationService.Notify($"Error retrieving packages: {ex.Message}", "error");
                Console.WriteLine($"Exception lors de l'initialisation du profil : {ex}");
            }


        }
    }
    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        var newUrl = context.TargetLocation;
            if(newUrl==Url)
            {
                context.PreventNavigation();
            }
        return ValueTask.CompletedTask;
    }
      public void Dispose()
    {
        _locationChangedHandler?.Dispose();
    }
}







