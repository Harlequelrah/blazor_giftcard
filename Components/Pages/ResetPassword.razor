@page "/reset-password"
@inject ToastrService Notify
@using blazor_giftcard.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http
@inject IHttpClientFactory httpClientFactory
@using System.ComponentModel.DataAnnotations
@using blazor_giftcard.Models
@using System.ComponentModel.DataAnnotations.Schema
@using System.Text.Json.Serialization
@inject NavigationManager Navigation

<head>

<link rel="stylesheet" href="Layout.css" />
</head>
<PageTitle>Reset Password</PageTitle>


<div class="container">
<EditForm Model="resetUser" OnValidSubmit="HandleUpdate" FormName="ResetPasswordForm" >
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <InputText @bind-Value="resetUser.Email" placeholder="Email" />
    </div>
    <div>
        <InputText @bind-Value="resetUser.CurrentPassword" class="password-input" type="@(showCurrentPassword ? "text" : "password")" placeholder="mot de passe actuelle" />
                <button type="button" style="margin-top:-25px;margin-right:45px;" @onclick="ToggleCurrentPasswordVisibility" class="password-toggle-btn">
            <i class="bi @(showCurrentPassword ? "bi-eye-slash" : "bi-eye")"></i>
        </button>
    </div>
        <div>
        <InputText @bind-Value="resetUser.NewPassword" class="password-input" type="@(showNewPassword ? "text" : "password")" placeholder="nouveau mot de passe" />
                <button type="button" style="margin-top:40px;margin-right:45px;" @onclick="ToggleNewPasswordVisibility" class="password-toggle-btn">
            <i class="bi @(showNewPassword ? "bi-eye-slash" : "bi-eye")"></i>
        </button>
    </div>

    <button type="submit">Valider</button>
</EditForm>
  <div class="drop drop-1">
  <p>Entrer les identifiants demandés pour changer votre mot de passe</p>
  </div>
  <div class="drop drop-2"></div>

  <div class="drop drop-4"></div>
  <div class="drop drop-5"></div>
</div>
<Redirection Url="reset-password" />
@code {
    [SupplyParameterFromForm]
    private ResetPasswordRequest resetUser { get; set; } = new ResetPasswordRequest();
        private bool showCurrentPassword = false;
        private bool showNewPassword = false;
    private HttpClient _authClient;

    protected override void OnInitialized()
    {
        _authClient = httpClientFactory.CreateClient("authClientAPI");
    }


    private void ToggleCurrentPasswordVisibility()
    {
        showCurrentPassword = !showCurrentPassword;
    }
        private void ToggleNewPasswordVisibility()
    {
        showNewPassword = !showNewPassword;
    }

    private async Task HandleUpdate()
    {
        Notify.Info("L' operation est en cours ...","Information");
        try
        {
        var response = await _authClient.PostAsJsonAsync("User/reset-password", resetUser);
        if (response.IsSuccessStatusCode)
        {
            Notify.Success("Tout s'est correctement déroulé.","SUCCESS");
            await Task.Delay(250);
            Navigation.NavigateTo("/logout");
        }
        else
        {
        Notify.Error("L' operation a echoué...Veuillez verifier vos identifiants ","Error");
        }
        }
        catch (Exception ex)
            {
            Notify.Error("Une erreur est survenue lors de l'opération...Veuillez réessayer plus tard ","Error");

            }
    }
}

